{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["MyHeader","className","Component","MyMeme","handleChange","event","target","name","value","setState","handleClick","myArray","state","allMemeImgs","data","memes","randomImg","Math","floor","random","length","url","topText","bottomText","fetch","then","response","json","joan","style","border","marginBottom","textAlign","this","src","type","placeholder","onChange","onClick","MyFooter","fontFamily","fontSize","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAceA,E,4JATb,WACE,OACE,8BACE,oBAAIC,UAAU,gBAAd,kC,GAJeC,a,OC6ERC,E,kDA5Eb,aAAe,IAAD,8BACZ,gBAkBFC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KArBZ,EAwBdE,YAAc,WACZ,IAAMC,EAAU,EAAKC,MAAMC,YAAYC,KAAKC,MAC5C,EAAKN,SAAS,CACZO,UAAWL,EAAQM,KAAKC,MAAMD,KAAKE,SAAWR,EAAQS,SAASC,OAzBjE,EAAKT,MAAQ,CACXU,QAAS,GACTC,WAAY,GACZP,UAAW,gCACXH,YAAa,IANH,E,qDAUd,WAAqB,IAAD,OAElBW,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKnB,SAAS,CAAEI,YAAae,S,oBAgBnC,WACE,OACE,qBAAK3B,UAAU,aAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,sBACE4B,MAAO,CACLC,OAAQ,kBACRC,aAAc,MACdC,UAAW,UAJf,UAOE,oBAAIH,MAAO,CAAEG,UAAW,UAAxB,SAAqCC,KAAKrB,MAAMU,UAChD,qBAAKY,IAAKD,KAAKrB,MAAMI,YACrB,oBAAIa,MAAO,CAAEG,UAAW,UAAxB,SAAqCC,KAAKrB,MAAMW,gBAGlD,uBACEtB,UAAU,eACVkC,KAAK,OACL3B,MAAOyB,KAAKrB,MAAMU,QAClBf,KAAK,UACL6B,YAAY,WACZC,SAAUJ,KAAK7B,eAEjB,uBACA,uBACA,uBACEH,UAAU,eACVkC,KAAK,OACL3B,MAAOyB,KAAKrB,MAAMW,WAClBhB,KAAK,aACL6B,YAAY,cACZC,SAAUJ,KAAK7B,eAEjB,uBACA,uBACA,wBAAQH,UAAU,WAAWqC,QAASL,KAAKvB,YAA3C,oC,GApEWR,aCqBNqC,E,4JApBb,WACE,OACE,wBAAQtC,UAAU,WAAlB,SACE,oBAAGA,UAAU,OAAb,uDAC0C,IACxC,sBACE4B,MAAO,CACLW,WAAY,oBACZC,SAAU,OACVC,MAAO,SAJX,iC,GANaxC,aCoBRyC,E,kDAfb,aAAe,IAAD,8BACZ,gBACK/B,MAAQ,GAFD,E,0CAId,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAVUV,aCIH0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f8ace103.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass MyHeader extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"myheader meme\">Meme Generator</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyHeader;\r\n","/** @format */\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass MyMeme extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //ensure that data is fetched at the beginning\r\n    fetch(\"https://api.imgflip.com/get_memes\") //call to URL\r\n      .then((response) => response.json()) //turn promise into JS object\r\n      .then((joan) => {\r\n        this.setState({ allMemeImgs: joan }); // set allMemeImgs state\r\n      });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const myArray = this.state.allMemeImgs.data.memes;\r\n    this.setState({\r\n      randomImg: myArray[Math.floor(Math.random() * myArray.length)].url,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row mymeme\">\r\n        <div className=\"col-md-6 offset-md-3\">\r\n          <div\r\n            style={{\r\n              border: \"3px solid black\",\r\n              marginBottom: \"3em\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <h1 style={{ textAlign: \"center\" }}>{this.state.topText}</h1>\r\n            <img src={this.state.randomImg} />\r\n            <h1 style={{ textAlign: \"center\" }}>{this.state.bottomText}</h1>\r\n          </div>\r\n\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            value={this.state.topText}\r\n            name=\"topText\"\r\n            placeholder=\"Top text\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <br />\r\n          <br />\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            value={this.state.bottomText}\r\n            name=\"bottomText\"\r\n            placeholder=\"Bottom Text\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <br />\r\n          <br />\r\n          <button className=\"mybutton\" onClick={this.handleClick}>\r\n            Generate Meme\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyMeme;\r\n","/** @format */\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass MyFooter extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"myfooter\">\r\n        <p className=\"foot\">\r\n          Â© 2021. All Rights reserved | Design by{\" \"}\r\n          <span\r\n            style={{\r\n              fontFamily: \"Romantica Regular\",\r\n              fontSize: \"33px\",\r\n              color: \"#fff)\",\r\n            }}\r\n          >\r\n            Joan Mumbi\r\n          </span>\r\n        </p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyFooter;\r\n","/** @format */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./css/style.css\";\r\nimport MyHeader from \"./components/Header\";\r\nimport MyMeme from \"./components/MemeGenerator\";\r\nimport MyFooter from \"./components/Footer\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MyHeader />\r\n        <MyMeme />\r\n        <MyFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}